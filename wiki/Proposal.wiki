#summary Draft for the project proposal due Sept. 25, 2007
#labels Featured,Phase-Design

= Introduction =

BCIS is a programming language for scientific computation, designed for students studying beginning and intermediate-level physics, chemistry, or other sciences.  It is useful primarily as an educational tool, but may also be useful for exploratory data analysis in scientific fields.

= Prior Art =

Superficially, the behavior of BCIS resembles that of the Google Calculator, [http://www.google.com/help/calculator.html].  The differences from Google Calculator are: 

  # BCIS is a full-featured imperative programming language with variables, loops, branching, and user-defined functions;
  # BCIS programs can define new units and the relationships between them; and
  # BCIS can infer the necessary calculations to obtain a desired result given a set of input variables.

BCIS has some features in common with computer algebra systems such as Maxima, Octave, or Matlab.  As far as the BCIS designers know, none of these systems allow for unit types or inferred calculation (see below).

In some ways BCIS behaves like logic languages such as Prolog, in which the user enters a series of facts and then asks questions.


= Language Overview =

== Interpreter ==

BCIS is an interpreted programming language.  The interpreter is written in Java and can be run either interactively or on a file containing BCIS source code.


== Types ==

The BCIS type system uses physical units like "meters" and "seconds" as types instead of mathematical partitions like "integers" and "floats."  All numbers and arithmetic use arbitrary-precision decimals.  Irrational numbers such as pi may be converted to decimals or retained as symbols.  Unit types can be combined algebraically to form derived types such as "Newton*meters" or "meters/second."  A standard library provides most SI units and common equations from physics and chemistry.  New types may be defined by the user.  Type conversions are performed automatically as needed.

2-d and 3-d vectors are supported.  2-d vectors may be specified either as "x,y" components or as magnitude-direction pairs, e.g. "3 Newtons at 36 degrees."  3-d vectors may only be specified as components.  All mathematical operations allowed on numbers are also supported on vectors.

2-d and 3-d geometry is supported.  Figures may be specified by vertex positions, line lengths, or equations (e.g. circles).  Figures have properties such as area and volume, which are defined by relations (see below).


== Syntax ==

BCIS syntax is as simple as possible, using mostly English words.  Statements are separated by newlines.  Some whitespace is significant.  Standard imperative-language features such as loops, if/then/else branching, and user-defined functions are provided.  Standard C-like mathematical operators are provided, with the addition of "^" for exponentiation.


== Semantics ==

A BCIS program consists of definitions and queries.  '''Definitions''' specify types and relationships between those types.  Relationships may be defined as classic imperative-style functions or as algebraic equations.

'''Queries''' ask questions of the general form "find [something] given [x, y, and z]."  Queries may be used to convert a value of one type to another type, to see an equation solved in terms of a particular variable, or to evaluate a function for a set of inputs.

Queries work by '''inferred calculation'''.  Based on the types of the givens and the requested type, the interpreter infers the correct sequence of calculations and/or conversions to be performed.  To find this sequence, the interpreter uses any and all relations that have been defined in the current program.


== Plotting ==

BCIS can plot relations and figures in two dimensions.  3-d plotting is not supported.  Plot output goes to graphics files or a window.

 