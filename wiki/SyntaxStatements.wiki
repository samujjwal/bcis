#summary Syntax of statements
#labels Phase-Design

= Statements =

Statements are separated by *either* line breaks or semicolons.

== Assignment ==

`set var = expression`

Evaluate _expression_ and assign it to a local variable named _var_.  Note that `=` here is not an operator, it's part of the statement.

If _var_ is currently undefined, a new local variable is created.

== I/O ==

=== print ===
`print` _expression_

Evaluate _expression_ and print the result, followed by a newline, to the output stream.

=== read ===
`read` _variable_

Read a single value from the input stream and store it in _variable_.

== if/then/else ==

{{{
if expression then
    ... statements ...
elsif expression then
    ... statements ...
elsif expression then
    ... statements ...
...more elsif blocks...
else
    ... statements ...
done
}}}

== For Loops ==

{{{
for i from 1 to 100 step 5 do
    ... statements ...
done
}}}

== While Loops ==

{{{
while expression do
    ... statements ...
done
}}}

== Generic Loops ==

Put a loop inside "loop...done".  Use `break` anywhere in the loop to stop, `restart` to start over at the top of the loop.

{{{
loop
    ... statements ...
    restart
    ... statements ...
    break
    ... statements ...
done
}}}